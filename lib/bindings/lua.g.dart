// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Lua 5.1.5 bindings
class Lua5 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Lua5(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Lua5.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// state manipulation
  ffi.Pointer<lua_State> lua_newstate(
    lua_Alloc f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_newstate(
      f,
      ud,
    );
  }

  late final _lua_newstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              lua_Alloc, ffi.Pointer<ffi.Void>)>>('lua_newstate');
  late final _lua_newstate = _lua_newstatePtr.asFunction<
      ffi.Pointer<lua_State> Function(lua_Alloc, ffi.Pointer<ffi.Void>)>();

  void lua_close(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_close(
      L,
    );
  }

  late final _lua_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'lua_close');
  late final _lua_close =
      _lua_closePtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<lua_State> lua_newthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_newthread(
      L,
    );
  }

  late final _lua_newthreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              ffi.Pointer<lua_State>)>>('lua_newthread');
  late final _lua_newthread = _lua_newthreadPtr
      .asFunction<ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>)>();

  lua_CFunction lua_atpanic(
    ffi.Pointer<lua_State> L,
    lua_CFunction panicf,
  ) {
    return _lua_atpanic(
      L,
      panicf,
    );
  }

  late final _lua_atpanicPtr = _lookup<
      ffi.NativeFunction<
          lua_CFunction Function(
              ffi.Pointer<lua_State>, lua_CFunction)>>('lua_atpanic');
  late final _lua_atpanic = _lua_atpanicPtr.asFunction<
      lua_CFunction Function(ffi.Pointer<lua_State>, lua_CFunction)>();

  /// basic stack manipulation
  int lua_gettop(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gettop(
      L,
    );
  }

  late final _lua_gettopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_gettop');
  late final _lua_gettop =
      _lua_gettopPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  void lua_settop(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_settop(
      L,
      idx,
    );
  }

  late final _lua_settopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_settop');
  late final _lua_settop =
      _lua_settopPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushvalue(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_pushvalue(
      L,
      idx,
    );
  }

  late final _lua_pushvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_pushvalue');
  late final _lua_pushvalue = _lua_pushvaluePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_remove(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_remove(
      L,
      idx,
    );
  }

  late final _lua_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_remove');
  late final _lua_remove =
      _lua_removePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_insert(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_insert(
      L,
      idx,
    );
  }

  late final _lua_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_insert');
  late final _lua_insert =
      _lua_insertPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_replace(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_replace(
      L,
      idx,
    );
  }

  late final _lua_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_replace');
  late final _lua_replace =
      _lua_replacePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_checkstack(
    ffi.Pointer<lua_State> L,
    int sz,
  ) {
    return _lua_checkstack(
      L,
      sz,
    );
  }

  late final _lua_checkstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_checkstack');
  late final _lua_checkstack = _lua_checkstackPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_xmove(
    ffi.Pointer<lua_State> from,
    ffi.Pointer<lua_State> to,
    int n,
  ) {
    return _lua_xmove(
      from,
      to,
      n,
    );
  }

  late final _lua_xmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>,
              ffi.Int32)>>('lua_xmove');
  late final _lua_xmove = _lua_xmovePtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>, int)>();

  /// access functions (stack -> C)
  int lua_isnumber(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isnumber(
      L,
      idx,
    );
  }

  late final _lua_isnumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isnumber');
  late final _lua_isnumber =
      _lua_isnumberPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isstring(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isstring(
      L,
      idx,
    );
  }

  late final _lua_isstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isstring');
  late final _lua_isstring =
      _lua_isstringPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_iscfunction(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_iscfunction(
      L,
      idx,
    );
  }

  late final _lua_iscfunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_iscfunction');
  late final _lua_iscfunction = _lua_iscfunctionPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isuserdata(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isuserdata(
      L,
      idx,
    );
  }

  late final _lua_isuserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isuserdata');
  late final _lua_isuserdata = _lua_isuserdataPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_type(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_type(
      L,
      idx,
    );
  }

  late final _lua_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_type');
  late final _lua_type =
      _lua_typePtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Int8> lua_typename(
    ffi.Pointer<lua_State> L,
    int tp,
  ) {
    return _lua_typename(
      L,
      tp,
    );
  }

  late final _lua_typenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_typename');
  late final _lua_typename = _lua_typenamePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int)>();

  int lua_equal(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
  ) {
    return _lua_equal(
      L,
      idx1,
      idx2,
    );
  }

  late final _lua_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_equal');
  late final _lua_equal = _lua_equalPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_rawequal(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
  ) {
    return _lua_rawequal(
      L,
      idx1,
      idx2,
    );
  }

  late final _lua_rawequalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_rawequal');
  late final _lua_rawequal = _lua_rawequalPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_lessthan(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
  ) {
    return _lua_lessthan(
      L,
      idx1,
      idx2,
    );
  }

  late final _lua_lessthanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_lessthan');
  late final _lua_lessthan = _lua_lessthanPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  double lua_tonumber(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tonumber(
      L,
      idx,
    );
  }

  late final _lua_tonumberPtr = _lookup<
      ffi.NativeFunction<
          lua_Number Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_tonumber');
  late final _lua_tonumber = _lua_tonumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int)>();

  int lua_tointeger(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tointeger(
      L,
      idx,
    );
  }

  late final _lua_tointegerPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_tointeger');
  late final _lua_tointeger =
      _lua_tointegerPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_toboolean(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_toboolean(
      L,
      idx,
    );
  }

  late final _lua_tobooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_toboolean');
  late final _lua_toboolean =
      _lua_tobooleanPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Int8> lua_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<size_t> len,
  ) {
    return _lua_tolstring(
      L,
      idx,
      len,
    );
  }

  late final _lua_tolstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<size_t>)>>('lua_tolstring');
  late final _lua_tolstring = _lua_tolstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<size_t>)>();

  int lua_objlen(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_objlen(
      L,
      idx,
    );
  }

  late final _lua_objlenPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_objlen');
  late final _lua_objlen =
      _lua_objlenPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  lua_CFunction lua_tocfunction(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tocfunction(
      L,
      idx,
    );
  }

  late final _lua_tocfunctionPtr = _lookup<
      ffi.NativeFunction<
          lua_CFunction Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_tocfunction');
  late final _lua_tocfunction = _lua_tocfunctionPtr
      .asFunction<lua_CFunction Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Void> lua_touserdata(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_touserdata(
      L,
      idx,
    );
  }

  late final _lua_touserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_touserdata');
  late final _lua_touserdata = _lua_touserdataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<lua_State> lua_tothread(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tothread(
      L,
      idx,
    );
  }

  late final _lua_tothreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_tothread');
  late final _lua_tothread = _lua_tothreadPtr.asFunction<
      ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Void> lua_topointer(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_topointer(
      L,
      idx,
    );
  }

  late final _lua_topointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_topointer');
  late final _lua_topointer = _lua_topointerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)>();

  /// push functions (C -> stack)
  void lua_pushnil(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_pushnil(
      L,
    );
  }

  late final _lua_pushnilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'lua_pushnil');
  late final _lua_pushnil =
      _lua_pushnilPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void lua_pushnumber(
    ffi.Pointer<lua_State> L,
    double n,
  ) {
    return _lua_pushnumber(
      L,
      n,
    );
  }

  late final _lua_pushnumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, lua_Number)>>('lua_pushnumber');
  late final _lua_pushnumber = _lua_pushnumberPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, double)>();

  void lua_pushinteger(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_pushinteger(
      L,
      n,
    );
  }

  late final _lua_pushintegerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, lua_Integer)>>('lua_pushinteger');
  late final _lua_pushinteger = _lua_pushintegerPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushlstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _lua_pushlstring(
      L,
      s,
      l,
    );
  }

  late final _lua_pushlstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              size_t)>>('lua_pushlstring');
  late final _lua_pushlstring = _lua_pushlstringPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, int)>();

  void lua_pushstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _lua_pushstring(
      L,
      s,
    );
  }

  late final _lua_pushstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('lua_pushstring');
  late final _lua_pushstring = _lua_pushstringPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> lua_pushvfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
    ffi.Pointer<__va_list_tag> argp,
  ) {
    return _lua_pushvfstring(
      L,
      fmt,
      argp,
    );
  }

  late final _lua_pushvfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('lua_pushvfstring');
  late final _lua_pushvfstring = _lua_pushvfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Int8> lua_pushfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _lua_pushfstring(
      L,
      fmt,
    );
  }

  late final _lua_pushfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('lua_pushfstring');
  late final _lua_pushfstring = _lua_pushfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  void lua_pushcclosure(
    ffi.Pointer<lua_State> L,
    lua_CFunction fn,
    int n,
  ) {
    return _lua_pushcclosure(
      L,
      fn,
      n,
    );
  }

  late final _lua_pushcclosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_CFunction,
              ffi.Int32)>>('lua_pushcclosure');
  late final _lua_pushcclosure = _lua_pushcclosurePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, lua_CFunction, int)>();

  void lua_pushboolean(
    ffi.Pointer<lua_State> L,
    int b,
  ) {
    return _lua_pushboolean(
      L,
      b,
    );
  }

  late final _lua_pushbooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_pushboolean');
  late final _lua_pushboolean = _lua_pushbooleanPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushlightuserdata(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_pushlightuserdata(
      L,
      p,
    );
  }

  late final _lua_pushlightuserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>)>>('lua_pushlightuserdata');
  late final _lua_pushlightuserdata = _lua_pushlightuserdataPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>)>();

  int lua_pushthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_pushthread(
      L,
    );
  }

  late final _lua_pushthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_pushthread');
  late final _lua_pushthread =
      _lua_pushthreadPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  /// get functions (Lua -> stack)
  void lua_gettable(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_gettable(
      L,
      idx,
    );
  }

  late final _lua_gettablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_gettable');
  late final _lua_gettable =
      _lua_gettablePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_getfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> k,
  ) {
    return _lua_getfield(
      L,
      idx,
      k,
    );
  }

  late final _lua_getfieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('lua_getfield');
  late final _lua_getfield = _lua_getfieldPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void lua_rawget(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawget(
      L,
      idx,
    );
  }

  late final _lua_rawgetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_rawget');
  late final _lua_rawget =
      _lua_rawgetPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_rawgeti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rawgeti(
      L,
      idx,
      n,
    );
  }

  late final _lua_rawgetiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_rawgeti');
  late final _lua_rawgeti = _lua_rawgetiPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_createtable(
    ffi.Pointer<lua_State> L,
    int narr,
    int nrec,
  ) {
    return _lua_createtable(
      L,
      narr,
      nrec,
    );
  }

  late final _lua_createtablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Int32)>>('lua_createtable');
  late final _lua_createtable = _lua_createtablePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  ffi.Pointer<ffi.Void> lua_newuserdata(
    ffi.Pointer<lua_State> L,
    int sz,
  ) {
    return _lua_newuserdata(
      L,
      sz,
    );
  }

  late final _lua_newuserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, size_t)>>('lua_newuserdata');
  late final _lua_newuserdata = _lua_newuserdataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)>();

  int lua_getmetatable(
    ffi.Pointer<lua_State> L,
    int objindex,
  ) {
    return _lua_getmetatable(
      L,
      objindex,
    );
  }

  late final _lua_getmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_getmetatable');
  late final _lua_getmetatable = _lua_getmetatablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_getfenv(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_getfenv(
      L,
      idx,
    );
  }

  late final _lua_getfenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_getfenv');
  late final _lua_getfenv =
      _lua_getfenvPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  /// set functions (stack -> Lua)
  void lua_settable(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_settable(
      L,
      idx,
    );
  }

  late final _lua_settablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_settable');
  late final _lua_settable =
      _lua_settablePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_setfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> k,
  ) {
    return _lua_setfield(
      L,
      idx,
      k,
    );
  }

  late final _lua_setfieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('lua_setfield');
  late final _lua_setfield = _lua_setfieldPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void lua_rawset(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawset(
      L,
      idx,
    );
  }

  late final _lua_rawsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_rawset');
  late final _lua_rawset =
      _lua_rawsetPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_rawseti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rawseti(
      L,
      idx,
      n,
    );
  }

  late final _lua_rawsetiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_rawseti');
  late final _lua_rawseti = _lua_rawsetiPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_setmetatable(
    ffi.Pointer<lua_State> L,
    int objindex,
  ) {
    return _lua_setmetatable(
      L,
      objindex,
    );
  }

  late final _lua_setmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_setmetatable');
  late final _lua_setmetatable = _lua_setmetatablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_setfenv(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_setfenv(
      L,
      idx,
    );
  }

  late final _lua_setfenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_setfenv');
  late final _lua_setfenv =
      _lua_setfenvPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  /// `load' and `call' functions (load and run Lua code)
  void lua_call(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
  ) {
    return _lua_call(
      L,
      nargs,
      nresults,
    );
  }

  late final _lua_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_call');
  late final _lua_call = _lua_callPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_pcall(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int errfunc,
  ) {
    return _lua_pcall(
      L,
      nargs,
      nresults,
      errfunc,
    );
  }

  late final _lua_pcallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('lua_pcall');
  late final _lua_pcall = _lua_pcallPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int, int)>();

  int lua_cpcall(
    ffi.Pointer<lua_State> L,
    lua_CFunction func,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_cpcall(
      L,
      func,
      ud,
    );
  }

  late final _lua_cpcallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, lua_CFunction,
              ffi.Pointer<ffi.Void>)>>('lua_cpcall');
  late final _lua_cpcall = _lua_cpcallPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, lua_CFunction, ffi.Pointer<ffi.Void>)>();

  int lua_load(
    ffi.Pointer<lua_State> L,
    lua_Reader reader,
    ffi.Pointer<ffi.Void> dt,
    ffi.Pointer<ffi.Int8> chunkname,
  ) {
    return _lua_load(
      L,
      reader,
      dt,
      chunkname,
    );
  }

  late final _lua_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, lua_Reader,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>>('lua_load');
  late final _lua_load = _lua_loadPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, lua_Reader, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int8>)>();

  int lua_dump(
    ffi.Pointer<lua_State> L,
    lua_Writer writer,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _lua_dump(
      L,
      writer,
      data,
    );
  }

  late final _lua_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, lua_Writer,
              ffi.Pointer<ffi.Void>)>>('lua_dump');
  late final _lua_dump = _lua_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, lua_Writer, ffi.Pointer<ffi.Void>)>();

  /// coroutine functions
  int lua_yield(
    ffi.Pointer<lua_State> L,
    int nresults,
  ) {
    return _lua_yield(
      L,
      nresults,
    );
  }

  late final _lua_yieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_yield');
  late final _lua_yield =
      _lua_yieldPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_resume(
    ffi.Pointer<lua_State> L,
    int narg,
  ) {
    return _lua_resume(
      L,
      narg,
    );
  }

  late final _lua_resumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_resume');
  late final _lua_resume =
      _lua_resumePtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_status(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_status(
      L,
    );
  }

  late final _lua_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_status');
  late final _lua_status =
      _lua_statusPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_gc(
    ffi.Pointer<lua_State> L,
    int what,
    int data,
  ) {
    return _lua_gc(
      L,
      what,
      data,
    );
  }

  late final _lua_gcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_gc');
  late final _lua_gc =
      _lua_gcPtr.asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  /// miscellaneous functions
  int lua_error(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_error(
      L,
    );
  }

  late final _lua_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_error');
  late final _lua_error =
      _lua_errorPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_next(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_next(
      L,
      idx,
    );
  }

  late final _lua_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_next');
  late final _lua_next =
      _lua_nextPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_concat(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_concat(
      L,
      n,
    );
  }

  late final _lua_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_concat');
  late final _lua_concat =
      _lua_concatPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  lua_Alloc lua_getallocf(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ud,
  ) {
    return _lua_getallocf(
      L,
      ud,
    );
  }

  late final _lua_getallocfPtr = _lookup<
      ffi.NativeFunction<
          lua_Alloc Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('lua_getallocf');
  late final _lua_getallocf = _lua_getallocfPtr.asFunction<
      lua_Alloc Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void lua_setallocf(
    ffi.Pointer<lua_State> L,
    lua_Alloc f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setallocf(
      L,
      f,
      ud,
    );
  }

  late final _lua_setallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Alloc,
              ffi.Pointer<ffi.Void>)>>('lua_setallocf');
  late final _lua_setallocf = _lua_setallocfPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, lua_Alloc, ffi.Pointer<ffi.Void>)>();

  /// hack
  void lua_setlevel(
    ffi.Pointer<lua_State> from,
    ffi.Pointer<lua_State> to,
  ) {
    return _lua_setlevel(
      from,
      to,
    );
  }

  late final _lua_setlevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<lua_State>)>>('lua_setlevel');
  late final _lua_setlevel = _lua_setlevelPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>)>();

  int lua_getstack(
    ffi.Pointer<lua_State> L,
    int level,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getstack(
      L,
      level,
      ar,
    );
  }

  late final _lua_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<lua_Debug>)>>('lua_getstack');
  late final _lua_getstack = _lua_getstackPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<lua_Debug>)>();

  int lua_getinfo(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> what,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getinfo(
      L,
      what,
      ar,
    );
  }

  late final _lua_getinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<lua_Debug>)>>('lua_getinfo');
  late final _lua_getinfo = _lua_getinfoPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<lua_Debug>)>();

  ffi.Pointer<ffi.Int8> lua_getlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_getlocal(
      L,
      ar,
      n,
    );
  }

  late final _lua_getlocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<lua_Debug>, ffi.Int32)>>('lua_getlocal');
  late final _lua_getlocal = _lua_getlocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<lua_Debug>, int)>();

  ffi.Pointer<ffi.Int8> lua_setlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_setlocal(
      L,
      ar,
      n,
    );
  }

  late final _lua_setlocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<lua_Debug>, ffi.Int32)>>('lua_setlocal');
  late final _lua_setlocal = _lua_setlocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<lua_Debug>, int)>();

  ffi.Pointer<ffi.Int8> lua_getupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_getupvalue(
      L,
      funcindex,
      n,
    );
  }

  late final _lua_getupvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_getupvalue');
  late final _lua_getupvalue = _lua_getupvaluePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int, int)>();

  ffi.Pointer<ffi.Int8> lua_setupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_setupvalue(
      L,
      funcindex,
      n,
    );
  }

  late final _lua_setupvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_setupvalue');
  late final _lua_setupvalue = _lua_setupvaluePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_sethook(
    ffi.Pointer<lua_State> L,
    lua_Hook func,
    int mask,
    int count,
  ) {
    return _lua_sethook(
      L,
      func,
      mask,
      count,
    );
  }

  late final _lua_sethookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, lua_Hook, ffi.Int32,
              ffi.Int32)>>('lua_sethook');
  late final _lua_sethook = _lua_sethookPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, lua_Hook, int, int)>();

  lua_Hook lua_gethook(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethook(
      L,
    );
  }

  late final _lua_gethookPtr =
      _lookup<ffi.NativeFunction<lua_Hook Function(ffi.Pointer<lua_State>)>>(
          'lua_gethook');
  late final _lua_gethook =
      _lua_gethookPtr.asFunction<lua_Hook Function(ffi.Pointer<lua_State>)>();

  int lua_gethookmask(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethookmask(
      L,
    );
  }

  late final _lua_gethookmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_gethookmask');
  late final _lua_gethookmask =
      _lua_gethookmaskPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_gethookcount(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethookcount(
      L,
    );
  }

  late final _lua_gethookcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_gethookcount');
  late final _lua_gethookcount =
      _lua_gethookcountPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  late final ffi.Pointer<TValue> _luaO_nilobject_ =
      _lookup<TValue>('luaO_nilobject_');

  TValue get luaO_nilobject_ => _luaO_nilobject_.ref;

  int luaO_log2(
    int x,
  ) {
    return _luaO_log2(
      x,
    );
  }

  late final _luaO_log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>('luaO_log2');
  late final _luaO_log2 = _luaO_log2Ptr.asFunction<int Function(int)>();

  int luaO_int2fb(
    int x,
  ) {
    return _luaO_int2fb(
      x,
    );
  }

  late final _luaO_int2fbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>(
          'luaO_int2fb');
  late final _luaO_int2fb = _luaO_int2fbPtr.asFunction<int Function(int)>();

  int luaO_fb2int(
    int x,
  ) {
    return _luaO_fb2int(
      x,
    );
  }

  late final _luaO_fb2intPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('luaO_fb2int');
  late final _luaO_fb2int = _luaO_fb2intPtr.asFunction<int Function(int)>();

  int luaO_rawequalObj(
    ffi.Pointer<TValue> t1,
    ffi.Pointer<TValue> t2,
  ) {
    return _luaO_rawequalObj(
      t1,
      t2,
    );
  }

  late final _luaO_rawequalObjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<TValue>, ffi.Pointer<TValue>)>>('luaO_rawequalObj');
  late final _luaO_rawequalObj = _luaO_rawequalObjPtr
      .asFunction<int Function(ffi.Pointer<TValue>, ffi.Pointer<TValue>)>();

  int luaO_str2d(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<lua_Number> result,
  ) {
    return _luaO_str2d(
      s,
      result,
    );
  }

  late final _luaO_str2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<lua_Number>)>>('luaO_str2d');
  late final _luaO_str2d = _luaO_str2dPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<lua_Number>)>();

  ffi.Pointer<ffi.Int8> luaO_pushvfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
    ffi.Pointer<__va_list_tag> argp,
  ) {
    return _luaO_pushvfstring(
      L,
      fmt,
      argp,
    );
  }

  late final _luaO_pushvfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('luaO_pushvfstring');
  late final _luaO_pushvfstring = _luaO_pushvfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Int8> luaO_pushfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _luaO_pushfstring(
      L,
      fmt,
    );
  }

  late final _luaO_pushfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaO_pushfstring');
  late final _luaO_pushfstring = _luaO_pushfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  void luaO_chunkid(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> source,
    int len,
  ) {
    return _luaO_chunkid(
      out,
      source,
      len,
    );
  }

  late final _luaO_chunkidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('luaO_chunkid');
  late final _luaO_chunkid = _luaO_chunkidPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void luaA_pushobject(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
  ) {
    return _luaA_pushobject(
      L,
      o,
    );
  }

  late final _luaA_pushobjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>>('luaA_pushobject');
  late final _luaA_pushobject = _luaA_pushobjectPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int renamex_np(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Uint32)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Uint32)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  /// ANSI-C
  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> gets(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void perror(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int printf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int remove(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int sscanf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  /// Functions internal to the implementation.
  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, off_t, ffi.Int32)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<size_t> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Int32, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<size_t> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Int8>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
    ffi.Pointer<size_t> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>)>();

  /// perror(3) external variables
  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> ctermid_r(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<size_t> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<FILE>, ffi.Pointer<size_t>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<FILE>, ffi.Pointer<size_t>)>();

  ffi.Pointer<ffi.Int8> fmtcheck(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  /// Stdio function-access interface.
  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int32)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Int8>, ffi.Int32)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Int8>, ffi.Int32)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(
                          ffi.Pointer<ffi.Void>, fpos_t, ffi.Int32)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Int8>, ffi.Int32)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Int8>, ffi.Int32)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int32)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32, size_t,
              ffi.Pointer<ffi.Int8>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Int32, size_t,
              ffi.Pointer<ffi.Int8>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, int, int, ffi.Pointer<ffi.Int8>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<__va_list_tag> arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Int32,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  void luaL_openlib(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> libname,
    ffi.Pointer<luaL_Reg> l,
    int nup,
  ) {
    return _luaL_openlib(
      L,
      libname,
      l,
      nup,
    );
  }

  late final _luaL_openlibPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<luaL_Reg>, ffi.Int32)>>('luaL_openlib');
  late final _luaL_openlib = _luaL_openlibPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<luaL_Reg>, int)>();

  void luaL_register(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> libname,
    ffi.Pointer<luaL_Reg> l,
  ) {
    return _luaL_register(
      L,
      libname,
      l,
    );
  }

  late final _luaL_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<luaL_Reg>)>>('luaL_register');
  late final _luaL_register = _luaL_registerPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<luaL_Reg>)>();

  int luaL_getmetafield(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Int8> e,
  ) {
    return _luaL_getmetafield(
      L,
      obj,
      e,
    );
  }

  late final _luaL_getmetafieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_getmetafield');
  late final _luaL_getmetafield = _luaL_getmetafieldPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int luaL_callmeta(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Int8> e,
  ) {
    return _luaL_callmeta(
      L,
      obj,
      e,
    );
  }

  late final _luaL_callmetaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_callmeta');
  late final _luaL_callmeta = _luaL_callmetaPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int luaL_typerror(
    ffi.Pointer<lua_State> L,
    int narg,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_typerror(
      L,
      narg,
      tname,
    );
  }

  late final _luaL_typerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_typerror');
  late final _luaL_typerror = _luaL_typerrorPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int luaL_argerror(
    ffi.Pointer<lua_State> L,
    int numarg,
    ffi.Pointer<ffi.Int8> extramsg,
  ) {
    return _luaL_argerror(
      L,
      numarg,
      extramsg,
    );
  }

  late final _luaL_argerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_argerror');
  late final _luaL_argerror = _luaL_argerrorPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaL_checklstring(
    ffi.Pointer<lua_State> L,
    int numArg,
    ffi.Pointer<size_t> l,
  ) {
    return _luaL_checklstring(
      L,
      numArg,
      l,
    );
  }

  late final _luaL_checklstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<size_t>)>>('luaL_checklstring');
  late final _luaL_checklstring = _luaL_checklstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<size_t>)>();

  ffi.Pointer<ffi.Int8> luaL_optlstring(
    ffi.Pointer<lua_State> L,
    int numArg,
    ffi.Pointer<ffi.Int8> def,
    ffi.Pointer<size_t> l,
  ) {
    return _luaL_optlstring(
      L,
      numArg,
      def,
      l,
    );
  }

  late final _luaL_optlstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>>('luaL_optlstring');
  late final _luaL_optlstring = _luaL_optlstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>();

  double luaL_checknumber(
    ffi.Pointer<lua_State> L,
    int numArg,
  ) {
    return _luaL_checknumber(
      L,
      numArg,
    );
  }

  late final _luaL_checknumberPtr = _lookup<
      ffi.NativeFunction<
          lua_Number Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_checknumber');
  late final _luaL_checknumber = _luaL_checknumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int)>();

  double luaL_optnumber(
    ffi.Pointer<lua_State> L,
    int nArg,
    double def,
  ) {
    return _luaL_optnumber(
      L,
      nArg,
      def,
    );
  }

  late final _luaL_optnumberPtr = _lookup<
      ffi.NativeFunction<
          lua_Number Function(ffi.Pointer<lua_State>, ffi.Int32,
              lua_Number)>>('luaL_optnumber');
  late final _luaL_optnumber = _luaL_optnumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int, double)>();

  int luaL_checkinteger(
    ffi.Pointer<lua_State> L,
    int numArg,
  ) {
    return _luaL_checkinteger(
      L,
      numArg,
    );
  }

  late final _luaL_checkintegerPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_checkinteger');
  late final _luaL_checkinteger = _luaL_checkintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaL_optinteger(
    ffi.Pointer<lua_State> L,
    int nArg,
    int def,
  ) {
    return _luaL_optinteger(
      L,
      nArg,
      def,
    );
  }

  late final _luaL_optintegerPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int32,
              lua_Integer)>>('luaL_optinteger');
  late final _luaL_optinteger = _luaL_optintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  void luaL_checkstack(
    ffi.Pointer<lua_State> L,
    int sz,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _luaL_checkstack(
      L,
      sz,
      msg,
    );
  }

  late final _luaL_checkstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_checkstack');
  late final _luaL_checkstack = _luaL_checkstackPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void luaL_checktype(
    ffi.Pointer<lua_State> L,
    int narg,
    int t,
  ) {
    return _luaL_checktype(
      L,
      narg,
      t,
    );
  }

  late final _luaL_checktypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('luaL_checktype');
  late final _luaL_checktype = _luaL_checktypePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void luaL_checkany(
    ffi.Pointer<lua_State> L,
    int narg,
  ) {
    return _luaL_checkany(
      L,
      narg,
    );
  }

  late final _luaL_checkanyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_checkany');
  late final _luaL_checkany = _luaL_checkanyPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaL_newmetatable(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_newmetatable(
      L,
      tname,
    );
  }

  late final _luaL_newmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaL_newmetatable');
  late final _luaL_newmetatable = _luaL_newmetatablePtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> luaL_checkudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_checkudata(
      L,
      ud,
      tname,
    );
  }

  late final _luaL_checkudataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_checkudata');
  late final _luaL_checkudata = _luaL_checkudataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void luaL_where(
    ffi.Pointer<lua_State> L,
    int lvl,
  ) {
    return _luaL_where(
      L,
      lvl,
    );
  }

  late final _luaL_wherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_where');
  late final _luaL_where =
      _luaL_wherePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaL_error(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _luaL_error(
      L,
      fmt,
    );
  }

  late final _luaL_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>>('luaL_error');
  late final _luaL_error = _luaL_errorPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  int luaL_checkoption(
    ffi.Pointer<lua_State> L,
    int narg,
    ffi.Pointer<ffi.Int8> def,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lst,
  ) {
    return _luaL_checkoption(
      L,
      narg,
      def,
      lst,
    );
  }

  late final _luaL_checkoptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('luaL_checkoption');
  late final _luaL_checkoption = _luaL_checkoptionPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int luaL_ref(
    ffi.Pointer<lua_State> L,
    int t,
  ) {
    return _luaL_ref(
      L,
      t,
    );
  }

  late final _luaL_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_ref');
  late final _luaL_ref =
      _luaL_refPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void luaL_unref(
    ffi.Pointer<lua_State> L,
    int t,
    int ref,
  ) {
    return _luaL_unref(
      L,
      t,
      ref,
    );
  }

  late final _luaL_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('luaL_unref');
  late final _luaL_unref = _luaL_unrefPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int luaL_loadfile(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _luaL_loadfile(
      L,
      filename,
    );
  }

  late final _luaL_loadfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>>('luaL_loadfile');
  late final _luaL_loadfile = _luaL_loadfilePtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  int luaL_loadbuffer(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> buff,
    int sz,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _luaL_loadbuffer(
      L,
      buff,
      sz,
      name,
    );
  }

  late final _luaL_loadbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              size_t, ffi.Pointer<ffi.Int8>)>>('luaL_loadbuffer');
  late final _luaL_loadbuffer = _luaL_loadbufferPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Int8>)>();

  int luaL_loadstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaL_loadstring(
      L,
      s,
    );
  }

  late final _luaL_loadstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaL_loadstring');
  late final _luaL_loadstring = _luaL_loadstringPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<lua_State> luaL_newstate() {
    return _luaL_newstate();
  }

  late final _luaL_newstatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lua_State> Function()>>(
          'luaL_newstate');
  late final _luaL_newstate =
      _luaL_newstatePtr.asFunction<ffi.Pointer<lua_State> Function()>();

  ffi.Pointer<ffi.Int8> luaL_gsub(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Int8> r,
  ) {
    return _luaL_gsub(
      L,
      s,
      p,
      r,
    );
  }

  late final _luaL_gsubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('luaL_gsub');
  late final _luaL_gsub = _luaL_gsubPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaL_findtable(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> fname,
    int szhint,
  ) {
    return _luaL_findtable(
      L,
      idx,
      fname,
      szhint,
    );
  }

  late final _luaL_findtablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('luaL_findtable');
  late final _luaL_findtable = _luaL_findtablePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>, int)>();

  void luaL_buffinit(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_buffinit(
      L,
      B,
    );
  }

  late final _luaL_buffinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<luaL_Buffer>)>>('luaL_buffinit');
  late final _luaL_buffinit = _luaL_buffinitPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Buffer>)>();

  ffi.Pointer<ffi.Int8> luaL_prepbuffer(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_prepbuffer(
      B,
    );
  }

  late final _luaL_prepbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<luaL_Buffer>)>>('luaL_prepbuffer');
  late final _luaL_prepbuffer = _luaL_prepbufferPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<luaL_Buffer>)>();

  void luaL_addlstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _luaL_addlstring(
      B,
      s,
      l,
    );
  }

  late final _luaL_addlstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>,
              size_t)>>('luaL_addlstring');
  late final _luaL_addlstring = _luaL_addlstringPtr.asFunction<
      void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>, int)>();

  void luaL_addstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaL_addstring(
      B,
      s,
    );
  }

  late final _luaL_addstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>,
              ffi.Pointer<ffi.Int8>)>>('luaL_addstring');
  late final _luaL_addstring = _luaL_addstringPtr.asFunction<
      void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>)>();

  void luaL_addvalue(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_addvalue(
      B,
    );
  }

  late final _luaL_addvaluePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<luaL_Buffer>)>>(
          'luaL_addvalue');
  late final _luaL_addvalue =
      _luaL_addvaluePtr.asFunction<void Function(ffi.Pointer<luaL_Buffer>)>();

  void luaL_pushresult(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_pushresult(
      B,
    );
  }

  late final _luaL_pushresultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<luaL_Buffer>)>>(
          'luaL_pushresult');
  late final _luaL_pushresult =
      _luaL_pushresultPtr.asFunction<void Function(ffi.Pointer<luaL_Buffer>)>();

  ffi.Pointer<ffi.Void> luaM_realloc_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    int oldsize,
    int size,
  ) {
    return _luaM_realloc_(
      L,
      block,
      oldsize,
      size,
    );
  }

  late final _luaM_realloc_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('luaM_realloc_');
  late final _luaM_realloc_ = _luaM_realloc_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> luaM_toobig(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaM_toobig(
      L,
    );
  }

  late final _luaM_toobigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>)>>('luaM_toobig');
  late final _luaM_toobig = _luaM_toobigPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<ffi.Void> luaM_growaux_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    ffi.Pointer<ffi.Int32> size,
    int size_elem,
    int limit,
    ffi.Pointer<ffi.Int8> errormsg,
  ) {
    return _luaM_growaux_(
      L,
      block,
      size,
      size_elem,
      limit,
      errormsg,
    );
  }

  late final _luaM_growaux_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>,
              size_t,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaM_growaux_');
  late final _luaM_growaux_ = _luaM_growaux_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int32>,
          int,
          int,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaZ_openspace(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<Mbuffer> buff,
    int n,
  ) {
    return _luaZ_openspace(
      L,
      buff,
      n,
    );
  }

  late final _luaZ_openspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<Mbuffer>, size_t)>>('luaZ_openspace');
  late final _luaZ_openspace = _luaZ_openspacePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<Mbuffer>, int)>();

  void luaZ_init(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ZIO> z,
    lua_Reader reader,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _luaZ_init(
      L,
      z,
      reader,
      data,
    );
  }

  late final _luaZ_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>,
              lua_Reader, ffi.Pointer<ffi.Void>)>>('luaZ_init');
  late final _luaZ_init = _luaZ_initPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>, lua_Reader,
          ffi.Pointer<ffi.Void>)>();

  int luaZ_read(
    ffi.Pointer<ZIO> z,
    ffi.Pointer<ffi.Void> b,
    int n,
  ) {
    return _luaZ_read(
      z,
      b,
      n,
    );
  }

  late final _luaZ_readPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ZIO>, ffi.Pointer<ffi.Void>, size_t)>>('luaZ_read');
  late final _luaZ_read = _luaZ_readPtr
      .asFunction<int Function(ffi.Pointer<ZIO>, ffi.Pointer<ffi.Void>, int)>();

  int luaZ_lookahead(
    ffi.Pointer<ZIO> z,
  ) {
    return _luaZ_lookahead(
      z,
    );
  }

  late final _luaZ_lookaheadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ZIO>)>>(
          'luaZ_lookahead');
  late final _luaZ_lookahead =
      _luaZ_lookaheadPtr.asFunction<int Function(ffi.Pointer<ZIO>)>();

  int luaZ_fill(
    ffi.Pointer<ZIO> z,
  ) {
    return _luaZ_fill(
      z,
    );
  }

  late final _luaZ_fillPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ZIO>)>>(
          'luaZ_fill');
  late final _luaZ_fill =
      _luaZ_fillPtr.asFunction<int Function(ffi.Pointer<ZIO>)>();

  /// array with token `names'
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _luaX_tokens =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('luaX_tokens');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get luaX_tokens => _luaX_tokens.value;

  set luaX_tokens(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _luaX_tokens.value = value;

  void luaX_init(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaX_init(
      L,
    );
  }

  late final _luaX_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaX_init');
  late final _luaX_init =
      _luaX_initPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaX_setinput(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<LexState> ls,
    ffi.Pointer<ZIO> z,
    ffi.Pointer<TString> source,
  ) {
    return _luaX_setinput(
      L,
      ls,
      z,
      source,
    );
  }

  late final _luaX_setinputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<LexState>,
              ffi.Pointer<ZIO>, ffi.Pointer<TString>)>>('luaX_setinput');
  late final _luaX_setinput = _luaX_setinputPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<LexState>,
          ffi.Pointer<ZIO>, ffi.Pointer<TString>)>();

  ffi.Pointer<TString> luaX_newstring(
    ffi.Pointer<LexState> ls,
    ffi.Pointer<ffi.Int8> str,
    int l,
  ) {
    return _luaX_newstring(
      ls,
      str,
      l,
    );
  }

  late final _luaX_newstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TString> Function(ffi.Pointer<LexState>,
              ffi.Pointer<ffi.Int8>, size_t)>>('luaX_newstring');
  late final _luaX_newstring = _luaX_newstringPtr.asFunction<
      ffi.Pointer<TString> Function(
          ffi.Pointer<LexState>, ffi.Pointer<ffi.Int8>, int)>();

  void luaX_next(
    ffi.Pointer<LexState> ls,
  ) {
    return _luaX_next(
      ls,
    );
  }

  late final _luaX_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LexState>)>>(
          'luaX_next');
  late final _luaX_next =
      _luaX_nextPtr.asFunction<void Function(ffi.Pointer<LexState>)>();

  void luaX_lookahead(
    ffi.Pointer<LexState> ls,
  ) {
    return _luaX_lookahead(
      ls,
    );
  }

  late final _luaX_lookaheadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LexState>)>>(
          'luaX_lookahead');
  late final _luaX_lookahead =
      _luaX_lookaheadPtr.asFunction<void Function(ffi.Pointer<LexState>)>();

  void luaX_lexerror(
    ffi.Pointer<LexState> ls,
    ffi.Pointer<ffi.Int8> msg,
    int token,
  ) {
    return _luaX_lexerror(
      ls,
      msg,
      token,
    );
  }

  late final _luaX_lexerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<LexState>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('luaX_lexerror');
  late final _luaX_lexerror = _luaX_lexerrorPtr.asFunction<
      void Function(ffi.Pointer<LexState>, ffi.Pointer<ffi.Int8>, int)>();

  void luaX_syntaxerror(
    ffi.Pointer<LexState> ls,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaX_syntaxerror(
      ls,
      s,
    );
  }

  late final _luaX_syntaxerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<LexState>,
              ffi.Pointer<ffi.Int8>)>>('luaX_syntaxerror');
  late final _luaX_syntaxerror = _luaX_syntaxerrorPtr.asFunction<
      void Function(ffi.Pointer<LexState>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaX_token2str(
    ffi.Pointer<LexState> ls,
    int token,
  ) {
    return _luaX_token2str(
      ls,
      token,
    );
  }

  late final _luaX_token2strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<LexState>, ffi.Int32)>>('luaX_token2str');
  late final _luaX_token2str = _luaX_token2strPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<LexState>, int)>();

  late final ffi.Pointer<ffi.Pointer<lu_byte>> _luaP_opmodes =
      _lookup<ffi.Pointer<lu_byte>>('luaP_opmodes');

  ffi.Pointer<lu_byte> get luaP_opmodes => _luaP_opmodes.value;

  set luaP_opmodes(ffi.Pointer<lu_byte> value) => _luaP_opmodes.value = value;

  /// opcode names
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _luaP_opnames =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('luaP_opnames');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get luaP_opnames => _luaP_opnames.value;

  set luaP_opnames(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _luaP_opnames.value = value;

  ffi.Pointer<Proto> luaY_parser(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ZIO> z,
    ffi.Pointer<Mbuffer> buff,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _luaY_parser(
      L,
      z,
      buff,
      name,
    );
  }

  late final _luaY_parserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Proto> Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>,
              ffi.Pointer<Mbuffer>, ffi.Pointer<ffi.Int8>)>>('luaY_parser');
  late final _luaY_parser = _luaY_parserPtr.asFunction<
      ffi.Pointer<Proto> Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>,
          ffi.Pointer<Mbuffer>, ffi.Pointer<ffi.Int8>)>();

  int luaK_codeABx(
    ffi.Pointer<FuncState> fs,
    int o,
    int A,
    int Bx,
  ) {
    return _luaK_codeABx(
      fs,
      o,
      A,
      Bx,
    );
  }

  late final _luaK_codeABxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FuncState>, ffi.Int32, ffi.Int32,
              ffi.Uint32)>>('luaK_codeABx');
  late final _luaK_codeABx = _luaK_codeABxPtr
      .asFunction<int Function(ffi.Pointer<FuncState>, int, int, int)>();

  int luaK_codeABC(
    ffi.Pointer<FuncState> fs,
    int o,
    int A,
    int B,
    int C,
  ) {
    return _luaK_codeABC(
      fs,
      o,
      A,
      B,
      C,
    );
  }

  late final _luaK_codeABCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FuncState>, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('luaK_codeABC');
  late final _luaK_codeABC = _luaK_codeABCPtr
      .asFunction<int Function(ffi.Pointer<FuncState>, int, int, int, int)>();

  void luaK_fixline(
    ffi.Pointer<FuncState> fs,
    int line,
  ) {
    return _luaK_fixline(
      fs,
      line,
    );
  }

  late final _luaK_fixlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32)>>('luaK_fixline');
  late final _luaK_fixline =
      _luaK_fixlinePtr.asFunction<void Function(ffi.Pointer<FuncState>, int)>();

  void luaK_nil(
    ffi.Pointer<FuncState> fs,
    int from,
    int n,
  ) {
    return _luaK_nil(
      fs,
      from,
      n,
    );
  }

  late final _luaK_nilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32, ffi.Int32)>>('luaK_nil');
  late final _luaK_nil = _luaK_nilPtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int, int)>();

  void luaK_reserveregs(
    ffi.Pointer<FuncState> fs,
    int n,
  ) {
    return _luaK_reserveregs(
      fs,
      n,
    );
  }

  late final _luaK_reserveregsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32)>>('luaK_reserveregs');
  late final _luaK_reserveregs = _luaK_reserveregsPtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int)>();

  void luaK_checkstack(
    ffi.Pointer<FuncState> fs,
    int n,
  ) {
    return _luaK_checkstack(
      fs,
      n,
    );
  }

  late final _luaK_checkstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32)>>('luaK_checkstack');
  late final _luaK_checkstack = _luaK_checkstackPtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int)>();

  int luaK_stringK(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<TString> s,
  ) {
    return _luaK_stringK(
      fs,
      s,
    );
  }

  late final _luaK_stringKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FuncState>, ffi.Pointer<TString>)>>('luaK_stringK');
  late final _luaK_stringK = _luaK_stringKPtr
      .asFunction<int Function(ffi.Pointer<FuncState>, ffi.Pointer<TString>)>();

  int luaK_numberK(
    ffi.Pointer<FuncState> fs,
    double r,
  ) {
    return _luaK_numberK(
      fs,
      r,
    );
  }

  late final _luaK_numberKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FuncState>, lua_Number)>>('luaK_numberK');
  late final _luaK_numberK = _luaK_numberKPtr
      .asFunction<int Function(ffi.Pointer<FuncState>, double)>();

  void luaK_dischargevars(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_dischargevars(
      fs,
      e,
    );
  }

  late final _luaK_dischargevarsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>,
              ffi.Pointer<expdesc>)>>('luaK_dischargevars');
  late final _luaK_dischargevars = _luaK_dischargevarsPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  int luaK_exp2anyreg(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_exp2anyreg(
      fs,
      e,
    );
  }

  late final _luaK_exp2anyregPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FuncState>,
              ffi.Pointer<expdesc>)>>('luaK_exp2anyreg');
  late final _luaK_exp2anyreg = _luaK_exp2anyregPtr
      .asFunction<int Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  void luaK_exp2nextreg(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_exp2nextreg(
      fs,
      e,
    );
  }

  late final _luaK_exp2nextregPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>,
              ffi.Pointer<expdesc>)>>('luaK_exp2nextreg');
  late final _luaK_exp2nextreg = _luaK_exp2nextregPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  void luaK_exp2val(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_exp2val(
      fs,
      e,
    );
  }

  late final _luaK_exp2valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>>('luaK_exp2val');
  late final _luaK_exp2val = _luaK_exp2valPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  int luaK_exp2RK(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_exp2RK(
      fs,
      e,
    );
  }

  late final _luaK_exp2RKPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>>('luaK_exp2RK');
  late final _luaK_exp2RK = _luaK_exp2RKPtr
      .asFunction<int Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  void luaK_self(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
    ffi.Pointer<expdesc> key,
  ) {
    return _luaK_self(
      fs,
      e,
      key,
    );
  }

  late final _luaK_selfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
              ffi.Pointer<expdesc>)>>('luaK_self');
  late final _luaK_self = _luaK_selfPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
          ffi.Pointer<expdesc>)>();

  void luaK_indexed(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> t,
    ffi.Pointer<expdesc> k,
  ) {
    return _luaK_indexed(
      fs,
      t,
      k,
    );
  }

  late final _luaK_indexedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
              ffi.Pointer<expdesc>)>>('luaK_indexed');
  late final _luaK_indexed = _luaK_indexedPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
          ffi.Pointer<expdesc>)>();

  void luaK_goiftrue(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_goiftrue(
      fs,
      e,
    );
  }

  late final _luaK_goiftruePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>>('luaK_goiftrue');
  late final _luaK_goiftrue = _luaK_goiftruePtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  void luaK_storevar(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> var1,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_storevar(
      fs,
      var1,
      e,
    );
  }

  late final _luaK_storevarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
              ffi.Pointer<expdesc>)>>('luaK_storevar');
  late final _luaK_storevar = _luaK_storevarPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
          ffi.Pointer<expdesc>)>();

  void luaK_setreturns(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
    int nresults,
  ) {
    return _luaK_setreturns(
      fs,
      e,
      nresults,
    );
  }

  late final _luaK_setreturnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>,
              ffi.Int32)>>('luaK_setreturns');
  late final _luaK_setreturns = _luaK_setreturnsPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>, int)>();

  void luaK_setoneret(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<expdesc> e,
  ) {
    return _luaK_setoneret(
      fs,
      e,
    );
  }

  late final _luaK_setoneretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>>('luaK_setoneret');
  late final _luaK_setoneret = _luaK_setoneretPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<expdesc>)>();

  int luaK_jump(
    ffi.Pointer<FuncState> fs,
  ) {
    return _luaK_jump(
      fs,
    );
  }

  late final _luaK_jumpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FuncState>)>>(
          'luaK_jump');
  late final _luaK_jump =
      _luaK_jumpPtr.asFunction<int Function(ffi.Pointer<FuncState>)>();

  void luaK_ret(
    ffi.Pointer<FuncState> fs,
    int first,
    int nret,
  ) {
    return _luaK_ret(
      fs,
      first,
      nret,
    );
  }

  late final _luaK_retPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32, ffi.Int32)>>('luaK_ret');
  late final _luaK_ret = _luaK_retPtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int, int)>();

  void luaK_patchlist(
    ffi.Pointer<FuncState> fs,
    int list,
    int target,
  ) {
    return _luaK_patchlist(
      fs,
      list,
      target,
    );
  }

  late final _luaK_patchlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32, ffi.Int32)>>('luaK_patchlist');
  late final _luaK_patchlist = _luaK_patchlistPtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int, int)>();

  void luaK_patchtohere(
    ffi.Pointer<FuncState> fs,
    int list,
  ) {
    return _luaK_patchtohere(
      fs,
      list,
    );
  }

  late final _luaK_patchtoherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FuncState>, ffi.Int32)>>('luaK_patchtohere');
  late final _luaK_patchtohere = _luaK_patchtoherePtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int)>();

  void luaK_concat(
    ffi.Pointer<FuncState> fs,
    ffi.Pointer<ffi.Int32> l1,
    int l2,
  ) {
    return _luaK_concat(
      fs,
      l1,
      l2,
    );
  }

  late final _luaK_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Pointer<ffi.Int32>,
              ffi.Int32)>>('luaK_concat');
  late final _luaK_concat = _luaK_concatPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, ffi.Pointer<ffi.Int32>, int)>();

  int luaK_getlabel(
    ffi.Pointer<FuncState> fs,
  ) {
    return _luaK_getlabel(
      fs,
    );
  }

  late final _luaK_getlabelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FuncState>)>>(
          'luaK_getlabel');
  late final _luaK_getlabel =
      _luaK_getlabelPtr.asFunction<int Function(ffi.Pointer<FuncState>)>();

  void luaK_prefix(
    ffi.Pointer<FuncState> fs,
    int op,
    ffi.Pointer<expdesc> v,
  ) {
    return _luaK_prefix(
      fs,
      op,
      v,
    );
  }

  late final _luaK_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Int32,
              ffi.Pointer<expdesc>)>>('luaK_prefix');
  late final _luaK_prefix = _luaK_prefixPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, int, ffi.Pointer<expdesc>)>();

  void luaK_infix(
    ffi.Pointer<FuncState> fs,
    int op,
    ffi.Pointer<expdesc> v,
  ) {
    return _luaK_infix(
      fs,
      op,
      v,
    );
  }

  late final _luaK_infixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Int32,
              ffi.Pointer<expdesc>)>>('luaK_infix');
  late final _luaK_infix = _luaK_infixPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, int, ffi.Pointer<expdesc>)>();

  void luaK_posfix(
    ffi.Pointer<FuncState> fs,
    int op,
    ffi.Pointer<expdesc> v1,
    ffi.Pointer<expdesc> v2,
  ) {
    return _luaK_posfix(
      fs,
      op,
      v1,
      v2,
    );
  }

  late final _luaK_posfixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Int32,
              ffi.Pointer<expdesc>, ffi.Pointer<expdesc>)>>('luaK_posfix');
  late final _luaK_posfix = _luaK_posfixPtr.asFunction<
      void Function(ffi.Pointer<FuncState>, int, ffi.Pointer<expdesc>,
          ffi.Pointer<expdesc>)>();

  void luaK_setlist(
    ffi.Pointer<FuncState> fs,
    int base,
    int nelems,
    int tostore,
  ) {
    return _luaK_setlist(
      fs,
      base,
      nelems,
      tostore,
    );
  }

  late final _luaK_setlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FuncState>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('luaK_setlist');
  late final _luaK_setlist = _luaK_setlistPtr
      .asFunction<void Function(ffi.Pointer<FuncState>, int, int, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _luaT_typenames =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('luaT_typenames');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get luaT_typenames =>
      _luaT_typenames.value;

  set luaT_typenames(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _luaT_typenames.value = value;

  ffi.Pointer<TValue> luaT_gettm(
    ffi.Pointer<Table> events,
    int event,
    ffi.Pointer<TString> ename,
  ) {
    return _luaT_gettm(
      events,
      event,
      ename,
    );
  }

  late final _luaT_gettmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TValue> Function(ffi.Pointer<Table>, ffi.Int32,
              ffi.Pointer<TString>)>>('luaT_gettm');
  late final _luaT_gettm = _luaT_gettmPtr.asFunction<
      ffi.Pointer<TValue> Function(
          ffi.Pointer<Table>, int, ffi.Pointer<TString>)>();

  ffi.Pointer<TValue> luaT_gettmbyobj(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
    int event,
  ) {
    return _luaT_gettmbyobj(
      L,
      o,
      event,
    );
  }

  late final _luaT_gettmbyobjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TValue> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>, ffi.Int32)>>('luaT_gettmbyobj');
  late final _luaT_gettmbyobj = _luaT_gettmbyobjPtr.asFunction<
      ffi.Pointer<TValue> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, int)>();

  void luaT_init(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaT_init(
      L,
    );
  }

  late final _luaT_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaT_init');
  late final _luaT_init =
      _luaT_initPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<lua_State> luaE_newthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaE_newthread(
      L,
    );
  }

  late final _luaE_newthreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              ffi.Pointer<lua_State>)>>('luaE_newthread');
  late final _luaE_newthread = _luaE_newthreadPtr
      .asFunction<ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>)>();

  void luaE_freethread(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> L1,
  ) {
    return _luaE_freethread(
      L,
      L1,
    );
  }

  late final _luaE_freethreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<lua_State>)>>('luaE_freethread');
  late final _luaE_freethread = _luaE_freethreadPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>)>();

  int luaD_protectedparser(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ZIO> z,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _luaD_protectedparser(
      L,
      z,
      name,
    );
  }

  late final _luaD_protectedparserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>,
              ffi.Pointer<ffi.Int8>)>>('luaD_protectedparser');
  late final _luaD_protectedparser = _luaD_protectedparserPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ZIO>, ffi.Pointer<ffi.Int8>)>();

  void luaD_callhook(
    ffi.Pointer<lua_State> L,
    int event,
    int line,
  ) {
    return _luaD_callhook(
      L,
      event,
      line,
    );
  }

  late final _luaD_callhookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('luaD_callhook');
  late final _luaD_callhook = _luaD_callhookPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int luaD_precall(
    ffi.Pointer<lua_State> L,
    StkId func,
    int nresults,
  ) {
    return _luaD_precall(
      L,
      func,
      nresults,
    );
  }

  late final _luaD_precallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, StkId, ffi.Int32)>>('luaD_precall');
  late final _luaD_precall = _luaD_precallPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, StkId, int)>();

  void luaD_call(
    ffi.Pointer<lua_State> L,
    StkId func,
    int nResults,
  ) {
    return _luaD_call(
      L,
      func,
      nResults,
    );
  }

  late final _luaD_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, StkId, ffi.Int32)>>('luaD_call');
  late final _luaD_call = _luaD_callPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, StkId, int)>();

  int luaD_pcall(
    ffi.Pointer<lua_State> L,
    Pfunc func,
    ffi.Pointer<ffi.Void> u,
    int oldtop,
    int ef,
  ) {
    return _luaD_pcall(
      L,
      func,
      u,
      oldtop,
      ef,
    );
  }

  late final _luaD_pcallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, Pfunc,
              ffi.Pointer<ffi.Void>, ptrdiff_t, ptrdiff_t)>>('luaD_pcall');
  late final _luaD_pcall = _luaD_pcallPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, Pfunc, ffi.Pointer<ffi.Void>, int, int)>();

  int luaD_poscall(
    ffi.Pointer<lua_State> L,
    StkId firstResult,
  ) {
    return _luaD_poscall(
      L,
      firstResult,
    );
  }

  late final _luaD_poscallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, StkId)>>('luaD_poscall');
  late final _luaD_poscall = _luaD_poscallPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, StkId)>();

  void luaD_reallocCI(
    ffi.Pointer<lua_State> L,
    int newsize,
  ) {
    return _luaD_reallocCI(
      L,
      newsize,
    );
  }

  late final _luaD_reallocCIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaD_reallocCI');
  late final _luaD_reallocCI = _luaD_reallocCIPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void luaD_reallocstack(
    ffi.Pointer<lua_State> L,
    int newsize,
  ) {
    return _luaD_reallocstack(
      L,
      newsize,
    );
  }

  late final _luaD_reallocstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaD_reallocstack');
  late final _luaD_reallocstack = _luaD_reallocstackPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void luaD_growstack(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _luaD_growstack(
      L,
      n,
    );
  }

  late final _luaD_growstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaD_growstack');
  late final _luaD_growstack = _luaD_growstackPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void luaD_throw(
    ffi.Pointer<lua_State> L,
    int errcode,
  ) {
    return _luaD_throw(
      L,
      errcode,
    );
  }

  late final _luaD_throwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('luaD_throw');
  late final _luaD_throw =
      _luaD_throwPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaD_rawrunprotected(
    ffi.Pointer<lua_State> L,
    Pfunc f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _luaD_rawrunprotected(
      L,
      f,
      ud,
    );
  }

  late final _luaD_rawrunprotectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, Pfunc,
              ffi.Pointer<ffi.Void>)>>('luaD_rawrunprotected');
  late final _luaD_rawrunprotected = _luaD_rawrunprotectedPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, Pfunc, ffi.Pointer<ffi.Void>)>();

  void luaD_seterrorobj(
    ffi.Pointer<lua_State> L,
    int errcode,
    StkId oldtop,
  ) {
    return _luaD_seterrorobj(
      L,
      errcode,
      oldtop,
    );
  }

  late final _luaD_seterrorobjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, StkId)>>('luaD_seterrorobj');
  late final _luaD_seterrorobj = _luaD_seterrorobjPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, StkId)>();

  ffi.Pointer<Proto> luaF_newproto(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaF_newproto(
      L,
    );
  }

  late final _luaF_newprotoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Proto> Function(
              ffi.Pointer<lua_State>)>>('luaF_newproto');
  late final _luaF_newproto = _luaF_newprotoPtr
      .asFunction<ffi.Pointer<Proto> Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<Closure> luaF_newCclosure(
    ffi.Pointer<lua_State> L,
    int nelems,
    ffi.Pointer<Table> e,
  ) {
    return _luaF_newCclosure(
      L,
      nelems,
      e,
    );
  }

  late final _luaF_newCclosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Closure> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<Table>)>>('luaF_newCclosure');
  late final _luaF_newCclosure = _luaF_newCclosurePtr.asFunction<
      ffi.Pointer<Closure> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<Table>)>();

  ffi.Pointer<Closure> luaF_newLclosure(
    ffi.Pointer<lua_State> L,
    int nelems,
    ffi.Pointer<Table> e,
  ) {
    return _luaF_newLclosure(
      L,
      nelems,
      e,
    );
  }

  late final _luaF_newLclosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Closure> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<Table>)>>('luaF_newLclosure');
  late final _luaF_newLclosure = _luaF_newLclosurePtr.asFunction<
      ffi.Pointer<Closure> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<Table>)>();

  ffi.Pointer<UpVal> luaF_newupval(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaF_newupval(
      L,
    );
  }

  late final _luaF_newupvalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UpVal> Function(
              ffi.Pointer<lua_State>)>>('luaF_newupval');
  late final _luaF_newupval = _luaF_newupvalPtr
      .asFunction<ffi.Pointer<UpVal> Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<UpVal> luaF_findupval(
    ffi.Pointer<lua_State> L,
    StkId level,
  ) {
    return _luaF_findupval(
      L,
      level,
    );
  }

  late final _luaF_findupvalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UpVal> Function(
              ffi.Pointer<lua_State>, StkId)>>('luaF_findupval');
  late final _luaF_findupval = _luaF_findupvalPtr
      .asFunction<ffi.Pointer<UpVal> Function(ffi.Pointer<lua_State>, StkId)>();

  void luaF_close(
    ffi.Pointer<lua_State> L,
    StkId level,
  ) {
    return _luaF_close(
      L,
      level,
    );
  }

  late final _luaF_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>, StkId)>>(
      'luaF_close');
  late final _luaF_close =
      _luaF_closePtr.asFunction<void Function(ffi.Pointer<lua_State>, StkId)>();

  void luaF_freeproto(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<Proto> f,
  ) {
    return _luaF_freeproto(
      L,
      f,
    );
  }

  late final _luaF_freeprotoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<Proto>)>>('luaF_freeproto');
  late final _luaF_freeproto = _luaF_freeprotoPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, ffi.Pointer<Proto>)>();

  void luaF_freeclosure(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<Closure> c,
  ) {
    return _luaF_freeclosure(
      L,
      c,
    );
  }

  late final _luaF_freeclosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<Closure>)>>('luaF_freeclosure');
  late final _luaF_freeclosure = _luaF_freeclosurePtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<Closure>)>();

  void luaF_freeupval(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<UpVal> uv,
  ) {
    return _luaF_freeupval(
      L,
      uv,
    );
  }

  late final _luaF_freeupvalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<UpVal>)>>('luaF_freeupval');
  late final _luaF_freeupval = _luaF_freeupvalPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, ffi.Pointer<UpVal>)>();

  ffi.Pointer<ffi.Int8> luaF_getlocalname(
    ffi.Pointer<Proto> func,
    int local_number,
    int pc,
  ) {
    return _luaF_getlocalname(
      func,
      local_number,
      pc,
    );
  }

  late final _luaF_getlocalnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<Proto>, ffi.Int32, ffi.Int32)>>('luaF_getlocalname');
  late final _luaF_getlocalname = _luaF_getlocalnamePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<Proto>, int, int)>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> __mbstate8;

  /// for alignment
  @ffi.Int64()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class lua_State extends ffi.Opaque {}

/// prototype for memory-allocation functions
typedef lua_Alloc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t, size_t)>>;
typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;
typedef lua_CFunction = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>;

/// type of numbers in Lua
typedef lua_Number = ffi.Double;

/// type for integer functions
typedef lua_Integer = ptrdiff_t;
typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __darwin_ptrdiff_t = ffi.Int64;

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// functions that read/write blocks when loading/dumping Lua chunks
typedef lua_Reader = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<size_t>)>>;
typedef lua_Writer = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>,
            size_t, ffi.Pointer<ffi.Void>)>>;

class lua_Debug extends ffi.Struct {
  @ffi.Int32()
  external int event;

  /// (n)
  external ffi.Pointer<ffi.Int8> name;

  /// (n) `global', `local', `field', `method'
  external ffi.Pointer<ffi.Int8> namewhat;

  /// (S) `Lua', `C', `main', `tail'
  external ffi.Pointer<ffi.Int8> what;

  /// (S)
  external ffi.Pointer<ffi.Int8> source;

  /// (l)
  @ffi.Int32()
  external int currentline;

  /// (u) number of upvalues
  @ffi.Int32()
  external int nups;

  /// (S)
  @ffi.Int32()
  external int linedefined;

  /// (S)
  @ffi.Int32()
  external int lastlinedefined;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Int8> short_src;

  /// active function
  @ffi.Int32()
  external int i_ci;
}

/// Functions to be called by the debuger in specific events
typedef lua_Hook = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_Debug>)>>;

class L_Umaxalign extends ffi.Union {
  @ffi.Double()
  external double u;

  external ffi.Pointer<ffi.Void> s;

  @ffi.Int64()
  external int l;
}

class GCObject extends ffi.Opaque {}

/// Common header in struct form
class GCheader extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;
}

/// chars used as small naturals (so that `char' is reserved for characters)
typedef lu_byte = ffi.Uint8;

/// Union of all Lua values
class Value extends ffi.Union {
  external ffi.Pointer<GCObject> gc;

  external ffi.Pointer<ffi.Void> p;

  @lua_Number()
  external double n;

  @ffi.Int32()
  external int b;
}

class lua_TValue extends ffi.Struct {
  external Value value;

  @ffi.Int32()
  external int tt;
}

/// String headers for string table
class TString extends ffi.Union {
  /// ensures maximum alignment for strings
  external L_Umaxalign dummy;

  external UnnamedStruct1 tsv;
}

class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int reserved;

  @ffi.Uint32()
  external int hash;

  @size_t()
  external int len;
}

class Udata extends ffi.Union {
  /// ensures maximum alignment for `local' udata
  external L_Umaxalign dummy;

  external UnnamedStruct2 uv;
}

class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  external ffi.Pointer<Table> metatable;

  external ffi.Pointer<Table> env;

  @size_t()
  external int len;
}

class Table extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  /// 1<<p means tagmethod(p) is not present
  @lu_byte()
  external int flags;

  /// log2 of size of `node' array
  @lu_byte()
  external int lsizenode;

  external ffi.Pointer<Table> metatable;

  /// array part
  external ffi.Pointer<TValue> array;

  external ffi.Pointer<Node> node;

  /// any free position is before this position
  external ffi.Pointer<Node> lastfree;

  external ffi.Pointer<GCObject> gclist;

  /// size of `array' array
  @ffi.Int32()
  external int sizearray;
}

typedef TValue = lua_TValue;

class Node extends ffi.Struct {
  external TValue i_val;

  external TKey i_key;
}

/// Tables
class TKey extends ffi.Union {
  external UnnamedStruct3 nk;

  external TValue tvk;
}

class UnnamedStruct3 extends ffi.Struct {
  external Value value;

  @ffi.Int32()
  external int tt;

  /// for chaining
  external ffi.Pointer<Node> next;
}

/// Function Prototypes
class Proto extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  /// constants used by the function
  external ffi.Pointer<TValue> k;

  external ffi.Pointer<Instruction> code;

  /// functions defined inside the function
  external ffi.Pointer<ffi.Pointer<Proto>> p;

  /// map from opcodes to source lines
  external ffi.Pointer<ffi.Int32> lineinfo;

  /// information about local variables
  external ffi.Pointer<LocVar> locvars;

  /// upvalue names
  external ffi.Pointer<ffi.Pointer<TString>> upvalues;

  external ffi.Pointer<TString> source;

  @ffi.Int32()
  external int sizeupvalues;

  /// size of `k'
  @ffi.Int32()
  external int sizek;

  @ffi.Int32()
  external int sizecode;

  @ffi.Int32()
  external int sizelineinfo;

  /// size of `p'
  @ffi.Int32()
  external int sizep;

  @ffi.Int32()
  external int sizelocvars;

  @ffi.Int32()
  external int linedefined;

  @ffi.Int32()
  external int lastlinedefined;

  external ffi.Pointer<GCObject> gclist;

  /// number of upvalues
  @lu_byte()
  external int nups;

  @lu_byte()
  external int numparams;

  @lu_byte()
  external int is_vararg;

  @lu_byte()
  external int maxstacksize;
}

/// type for virtual-machine instructions
/// must be an unsigned with (at least) 4 bytes (see details in lopcodes.h)
typedef Instruction = lu_int32;
typedef lu_int32 = ffi.Uint32;

class LocVar extends ffi.Struct {
  external ffi.Pointer<TString> varname;

  /// first point where variable is active
  @ffi.Int32()
  external int startpc;

  /// first point where variable is dead
  @ffi.Int32()
  external int endpc;
}

/// Upvalues
class UpVal extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  /// points to stack or to its own value
  external ffi.Pointer<TValue> v;

  external UnnamedUnion1 u;
}

class UnnamedUnion1 extends ffi.Union {
  /// the value (when closed)
  external TValue value;

  external UnnamedStruct4 l;
}

class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<UpVal> prev;

  external ffi.Pointer<UpVal> next;
}

class CClosure extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int isC;

  @lu_byte()
  external int nupvalues;

  external ffi.Pointer<GCObject> gclist;

  external ffi.Pointer<Table> env;

  external lua_CFunction f;

  @ffi.Array.multi([1])
  external ffi.Array<TValue> upvalue;
}

class LClosure extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int isC;

  @lu_byte()
  external int nupvalues;

  external ffi.Pointer<GCObject> gclist;

  external ffi.Pointer<Table> env;

  external ffi.Pointer<Proto> p;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Pointer<UpVal>> upvals;
}

class Closure extends ffi.Union {
  external CClosure c;

  external LClosure l;
}

/// stdio buffers
class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  external int _size;
}

/// hold a buncha junk that would grow the ABI
class __sFILEX extends ffi.Opaque {}

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
class __sFILE extends ffi.Struct {
  /// current position in (some) buffer
  external ffi.Pointer<ffi.Uint8> _p;

  /// read space left for getc()
  @ffi.Int32()
  external int _r;

  /// write space left for putc()
  @ffi.Int32()
  external int _w;

  /// flags, below; this FILE is free if 0
  @ffi.Int16()
  external int _flags;

  /// fileno, if Unix descriptor, else -1
  @ffi.Int16()
  external int _file;

  /// the buffer (at least 1 byte, if !NULL)
  external __sbuf _bf;

  /// 0 or -_bf._size, for inline putc
  @ffi.Int32()
  external int _lbfsize;

  /// cookie passed to io functions
  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>> _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int32)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>> _write;

  /// ungetc buffer
  external __sbuf _ub;

  /// additions to FILE to not break ABI
  external ffi.Pointer<__sFILEX> _extra;

  /// saved _r when _r is counting ungetc data
  @ffi.Int32()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint8> _nbuf;

  /// buffer for fgetln()
  external __sbuf _lb;

  /// stat.st_blksize (may be != _bf._size)
  @ffi.Int32()
  external int _blksize;

  /// current lseek offset (see WARNING)
  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.Int64;

/// stdio state variables.
///
/// The following always hold:
///
/// if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
/// _lbfsize is -_bf._size, else _lbfsize is 0
/// if _flags&__SRD, _w is 0
/// if _flags&__SWR, _r is 0
///
/// This ensures that the getc and putc macros (or inline functions) never
/// try to write or read from a file that is in `read' or `write' mode.
/// (Moreover, they can, and do, automatically switch from read mode to
/// write mode, and back, on "r+" and "w+" files.)
///
/// _lbfsize is used only to make the inline line-buffered output stream
/// code as compact as possible.
///
/// _ub, _up, and _ur are used when ungetc() pushes back more characters
/// than fit in the current _bf, or when ungetc() pushes back a character
/// that does not match the previous one in _bf.  When this happens,
/// _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
/// _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
///
/// NB: see WARNING above before changing the layout of this structure!
typedef FILE = __sFILE;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Int64;

class luaL_Reg extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external lua_CFunction func;
}

/// {======================================================
/// Generic Buffer manipulation
/// =======================================================
class luaL_Buffer extends ffi.Struct {
  /// current position in buffer
  external ffi.Pointer<ffi.Int8> p;

  /// number of strings in the stack (level)
  @ffi.Int32()
  external int lvl;

  external ffi.Pointer<lua_State> L;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> buffer;
}

/// --------- Private Part ------------------
class Zio extends ffi.Struct {
  /// bytes still unread
  @size_t()
  external int n;

  /// current position in buffer
  external ffi.Pointer<ffi.Int8> p;

  external lua_Reader reader;

  /// additional data
  external ffi.Pointer<ffi.Void> data;

  /// Lua state (for reader)
  external ffi.Pointer<lua_State> L;
}

class Mbuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> buffer;

  @size_t()
  external int n;

  @size_t()
  external int buffsize;
}

typedef ZIO = Zio;

/// WARNING: if you change the order of this enumeration,
/// grep "ORDER RESERVED"
abstract class RESERVED {
  /// terminal symbols denoted by reserved words
  static const int TK_AND = 257;
  static const int TK_BREAK = 258;
  static const int TK_DO = 259;
  static const int TK_ELSE = 260;
  static const int TK_ELSEIF = 261;
  static const int TK_END = 262;
  static const int TK_FALSE = 263;
  static const int TK_FOR = 264;
  static const int TK_FUNCTION = 265;
  static const int TK_IF = 266;
  static const int TK_IN = 267;
  static const int TK_LOCAL = 268;
  static const int TK_NIL = 269;
  static const int TK_NOT = 270;
  static const int TK_OR = 271;
  static const int TK_REPEAT = 272;
  static const int TK_RETURN = 273;
  static const int TK_THEN = 274;
  static const int TK_TRUE = 275;
  static const int TK_UNTIL = 276;
  static const int TK_WHILE = 277;

  /// other terminal symbols
  static const int TK_CONCAT = 278;
  static const int TK_DOTS = 279;
  static const int TK_EQ = 280;
  static const int TK_GE = 281;
  static const int TK_LE = 282;
  static const int TK_NE = 283;
  static const int TK_NUMBER = 284;
  static const int TK_NAME = 285;
  static const int TK_STRING = 286;
  static const int TK_EOS = 287;
}

class SemInfo extends ffi.Union {
  @lua_Number()
  external double r;

  external ffi.Pointer<TString> ts;
}

class Token extends ffi.Struct {
  @ffi.Int32()
  external int token;

  external SemInfo seminfo;
}

class LexState extends ffi.Struct {
  /// current character (charint)
  @ffi.Int32()
  external int current;

  /// input line counter
  @ffi.Int32()
  external int linenumber;

  /// line of last token `consumed'
  @ffi.Int32()
  external int lastline;

  /// current token
  external Token t;

  /// look ahead token
  external Token lookahead;

  /// `FuncState' is private to the parser
  external ffi.Pointer<FuncState> fs;

  external ffi.Pointer<lua_State> L;

  /// input stream
  external ffi.Pointer<ZIO> z;

  /// buffer for tokens
  external ffi.Pointer<Mbuffer> buff;

  /// current source name
  external ffi.Pointer<TString> source;

  /// locale decimal point
  @ffi.Int8()
  external int decpoint;
}

/// state needed to generate code for a given function
class FuncState extends ffi.Struct {
  /// current function header
  external ffi.Pointer<Proto> f;

  /// table to find (and reuse) elements in `k'
  external ffi.Pointer<Table> h;

  /// enclosing function
  external ffi.Pointer<FuncState> prev;

  /// lexical state
  external ffi.Pointer<LexState> ls;

  /// copy of the Lua state
  external ffi.Pointer<lua_State> L;

  /// chain of current blocks
  external ffi.Pointer<BlockCnt> bl;

  /// next position to code (equivalent to `ncode')
  @ffi.Int32()
  external int pc;

  /// `pc' of last `jump target'
  @ffi.Int32()
  external int lasttarget;

  /// list of pending jumps to `pc'
  @ffi.Int32()
  external int jpc;

  /// first free register
  @ffi.Int32()
  external int freereg;

  /// number of elements in `k'
  @ffi.Int32()
  external int nk;

  /// number of elements in `p'
  @ffi.Int32()
  external int np;

  /// number of elements in `locvars'
  @ffi.Int16()
  external int nlocvars;

  /// number of active local variables
  @lu_byte()
  external int nactvar;

  @ffi.Array.multi([60])
  external ffi.Array<upvaldesc> upvalues;

  @ffi.Array.multi([200])
  external ffi.Array<ffi.Uint16> actvar;
}

class BlockCnt extends ffi.Opaque {}

class upvaldesc extends ffi.Struct {
  @lu_byte()
  external int k;

  @lu_byte()
  external int info;
}

/// ===========================================================================
/// We assume that instructions are unsigned numbers.
/// All instructions have an opcode in the first 6 bits.
/// Instructions can have the following fields:
/// `A' : 8 bits
/// `B' : 9 bits
/// `C' : 9 bits
/// `Bx' : 18 bits (`B' and `C' together)
/// `sBx' : signed Bx
///
/// A signed argument is represented in excess K; that is, the number
/// value is the unsigned value minus K. K is exactly the maximum value
/// for that argument (so that -max is represented by 0, and +max is
/// represented by 2*max), which is half the maximum for the corresponding
/// unsigned argument.
/// ===========================================================================
abstract class OpMode {
  /// basic instruction format
  static const int iABC = 0;
  static const int iABx = 1;
  static const int iAsBx = 2;
}

/// grep "ORDER OP" if you change these enums
abstract class OpCode {
  /// A B	R(A) := R(B)
  static const int OP_MOVE = 0;

  /// A Bx	R(A) := Kst(Bx)
  static const int OP_LOADK = 1;

  /// A B C	R(A) := (Bool)B; if (C) pc++
  static const int OP_LOADBOOL = 2;

  /// A B	R(A) := ... := R(B) := nil
  static const int OP_LOADNIL = 3;

  /// A B	R(A) := UpValue[B]
  static const int OP_GETUPVAL = 4;

  /// A Bx	R(A) := Gbl[Kst(Bx)]
  static const int OP_GETGLOBAL = 5;

  /// A B C	R(A) := R(B)[RK(C)]
  static const int OP_GETTABLE = 6;

  /// A Bx	Gbl[Kst(Bx)] := R(A)
  static const int OP_SETGLOBAL = 7;

  /// A B	UpValue[B] := R(A)
  static const int OP_SETUPVAL = 8;

  /// A B C	R(A)[RK(B)] := RK(C)
  static const int OP_SETTABLE = 9;

  /// A B C	R(A) := {} (size = B,C)
  static const int OP_NEWTABLE = 10;

  /// A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]
  static const int OP_SELF = 11;

  /// A B C	R(A) := RK(B) + RK(C)
  static const int OP_ADD = 12;

  /// A B C	R(A) := RK(B) - RK(C)
  static const int OP_SUB = 13;

  /// A B C	R(A) := RK(B) * RK(C)
  static const int OP_MUL = 14;

  /// A B C	R(A) := RK(B) / RK(C)
  static const int OP_DIV = 15;

  /// A B C	R(A) := RK(B) % RK(C)
  static const int OP_MOD = 16;

  /// A B C	R(A) := RK(B) ^ RK(C)
  static const int OP_POW = 17;

  /// A B	R(A) := -R(B)
  static const int OP_UNM = 18;

  /// A B	R(A) := not R(B)
  static const int OP_NOT = 19;

  /// A B	R(A) := length of R(B)
  static const int OP_LEN = 20;

  /// A B C	R(A) := R(B).. ... ..R(C)
  static const int OP_CONCAT = 21;

  /// sBx	pc+=sBx
  static const int OP_JMP = 22;

  /// A B C	if ((RK(B) == RK(C)) ~= A) then pc++
  static const int OP_EQ = 23;

  /// A B C	if ((RK(B) <  RK(C)) ~= A) then pc++
  static const int OP_LT = 24;

  /// A B C	if ((RK(B) <= RK(C)) ~= A) then pc++
  static const int OP_LE = 25;

  /// A C	if not (R(A) <=> C) then pc++
  static const int OP_TEST = 26;

  /// A B C	if (R(B) <=> C) then R(A) := R(B) else pc++
  static const int OP_TESTSET = 27;

  /// A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))
  static const int OP_CALL = 28;

  /// A B C	return R(A)(R(A+1), ... ,R(A+B-1))
  static const int OP_TAILCALL = 29;

  /// A B	return R(A), ... ,R(A+B-2)	(see note)
  static const int OP_RETURN = 30;

  /// A sBx	R(A)+=R(A+2);
  /// if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) }
  static const int OP_FORLOOP = 31;

  /// A sBx	R(A)-=R(A+2); pc+=sBx
  static const int OP_FORPREP = 32;

  /// A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));
  /// if R(A+3) ~= nil then R(A+2)=R(A+3) else pc++
  static const int OP_TFORLOOP = 33;

  /// A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B
  static const int OP_SETLIST = 34;

  /// A 	close all variables in the stack up to (>=) R(A)
  static const int OP_CLOSE = 35;

  /// A Bx	R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n))
  static const int OP_CLOSURE = 36;

  /// A B	R(A), R(A+1), ..., R(A+B-1) = vararg
  static const int OP_VARARG = 37;
}

/// masks for instruction properties. The format is:
/// bits 0-1: op mode
/// bits 2-3: C arg mode
/// bits 4-5: B arg mode
/// bit 6: instruction set register A
/// bit 7: operator is a test
abstract class OpArgMask {
  /// argument is not used
  static const int OpArgN = 0;

  /// argument is used
  static const int OpArgU = 1;

  /// argument is a register or a jump offset
  static const int OpArgR = 2;

  /// argument is a constant or register/constant
  static const int OpArgK = 3;
}

/// Expression descriptor
abstract class expkind {
  /// no value
  static const int VVOID = 0;
  static const int VNIL = 1;
  static const int VTRUE = 2;
  static const int VFALSE = 3;

  /// info = index of constant in `k'
  static const int VK = 4;

  /// nval = numerical value
  static const int VKNUM = 5;

  /// info = local register
  static const int VLOCAL = 6;

  /// info = index of upvalue in `upvalues'
  static const int VUPVAL = 7;

  /// info = index of table; aux = index of global name in `k'
  static const int VGLOBAL = 8;

  /// info = table register; aux = index register (or `k')
  static const int VINDEXED = 9;

  /// info = instruction pc
  static const int VJMP = 10;

  /// info = instruction pc
  static const int VRELOCABLE = 11;

  /// info = result register
  static const int VNONRELOC = 12;

  /// info = instruction pc
  static const int VCALL = 13;

  /// info = instruction pc
  static const int VVARARG = 14;
}

class expdesc extends ffi.Struct {
  @ffi.Int32()
  external int k;

  external UnnamedUnion2 u;

  /// patch list of `exit when true'
  @ffi.Int32()
  external int t;

  /// patch list of `exit when false'
  @ffi.Int32()
  external int f;
}

class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct5 s;

  @lua_Number()
  external double nval;
}

class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int32()
  external int info;

  @ffi.Int32()
  external int aux;
}

/// grep "ORDER OPR" if you change these enums
abstract class BinOpr {
  static const int OPR_ADD = 0;
  static const int OPR_SUB = 1;
  static const int OPR_MUL = 2;
  static const int OPR_DIV = 3;
  static const int OPR_MOD = 4;
  static const int OPR_POW = 5;
  static const int OPR_CONCAT = 6;
  static const int OPR_NE = 7;
  static const int OPR_EQ = 8;
  static const int OPR_LT = 9;
  static const int OPR_LE = 10;
  static const int OPR_GT = 11;
  static const int OPR_GE = 12;
  static const int OPR_AND = 13;
  static const int OPR_OR = 14;
  static const int OPR_NOBINOPR = 15;
}

abstract class UnOpr {
  static const int OPR_MINUS = 0;
  static const int OPR_NOT = 1;
  static const int OPR_LEN = 2;
  static const int OPR_NOUNOPR = 3;
}

/// WARNING: if you change the order of this enumeration,
/// grep "ORDER TM"
abstract class TMS {
  static const int TM_INDEX = 0;
  static const int TM_NEWINDEX = 1;
  static const int TM_GC = 2;
  static const int TM_MODE = 3;

  /// last tag method with `fast' access
  static const int TM_EQ = 4;
  static const int TM_ADD = 5;
  static const int TM_SUB = 6;
  static const int TM_MUL = 7;
  static const int TM_DIV = 8;
  static const int TM_MOD = 9;
  static const int TM_POW = 10;
  static const int TM_UNM = 11;
  static const int TM_LEN = 12;
  static const int TM_LT = 13;
  static const int TM_LE = 14;
  static const int TM_CONCAT = 15;
  static const int TM_CALL = 16;

  /// number of elements in the enum
  static const int TM_N = 17;
}

class lua_longjmp extends ffi.Opaque {}

class stringtable extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<GCObject>> hash;

  /// number of elements
  @lu_int32()
  external int nuse;

  @ffi.Int32()
  external int size;
}

/// informations about a call
class CallInfo extends ffi.Struct {
  /// base for this function
  external StkId base;

  /// function index in the stack
  external StkId func;

  /// top for this function
  external StkId top;

  external ffi.Pointer<Instruction> savedpc;

  /// expected number of results from this function
  @ffi.Int32()
  external int nresults;

  /// number of tail calls lost under this entry
  @ffi.Int32()
  external int tailcalls;
}

typedef StkId = ffi.Pointer<TValue>;

/// `global state', shared by all threads of this state
class global_State extends ffi.Struct {
  /// hash table for strings
  external stringtable strt;

  /// function to reallocate memory
  external lua_Alloc frealloc;

  /// auxiliary data to `frealloc'
  external ffi.Pointer<ffi.Void> ud;

  @lu_byte()
  external int currentwhite;

  /// state of garbage collector
  @lu_byte()
  external int gcstate;

  /// position of sweep in `strt'
  @ffi.Int32()
  external int sweepstrgc;

  /// list of all collectable objects
  external ffi.Pointer<GCObject> rootgc;

  /// position of sweep in `rootgc'
  external ffi.Pointer<ffi.Pointer<GCObject>> sweepgc;

  /// list of gray objects
  external ffi.Pointer<GCObject> gray;

  /// list of objects to be traversed atomically
  external ffi.Pointer<GCObject> grayagain;

  /// list of weak tables (to be cleared)
  external ffi.Pointer<GCObject> weak;

  /// last element of list of userdata to be GC
  external ffi.Pointer<GCObject> tmudata;

  /// temporary buffer for string concatentation
  external Mbuffer buff;

  @lu_mem()
  external int GCthreshold;

  /// number of bytes currently allocated
  @lu_mem()
  external int totalbytes;

  /// an estimate of number of bytes actually in use
  @lu_mem()
  external int estimate;

  /// how much GC is `behind schedule'
  @lu_mem()
  external int gcdept;

  /// size of pause between successive GCs
  @ffi.Int32()
  external int gcpause;

  /// GC `granularity'
  @ffi.Int32()
  external int gcstepmul;

  /// to be called in unprotected errors
  external lua_CFunction panic;

  external TValue l_registry;

  external ffi.Pointer<lua_State> mainthread;

  /// head of double-linked list of all open upvalues
  external UpVal uvhead;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Pointer<Table>> mt;

  @ffi.Array.multi([17])
  external ffi.Array<ffi.Pointer<TString>> tmname;
}

typedef lu_mem = size_t;

/// type of protected functions, to be ran by `runprotected'
typedef Pfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>)>>;

const int __GNUC_VA_LIST = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_CLK_TCK = 100;

const int CHAR_BIT = 8;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 8192;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const String LUA_PATH = 'LUA_PATH';

const String LUA_CPATH = 'LUA_CPATH';

const String LUA_INIT = 'LUA_INIT';

const String LUA_ROOT = '/usr/local/';

const String LUA_LDIR = '/usr/local/share/lua/5.1/';

const String LUA_CDIR = '/usr/local/lib/lua/5.1/';

const String LUA_PATH_DEFAULT =
    './?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua';

const String LUA_CPATH_DEFAULT =
    './?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so';

const String LUA_DIRSEP = '/';

const String LUA_PATHSEP = ';';

const String LUA_PATH_MARK = '?';

const String LUA_EXECDIR = '!';

const String LUA_IGMARK = '-';

const String LUA_QS = '\'%s\'';

const int LUA_IDSIZE = 60;

const int LUAI_GCPAUSE = 200;

const int LUAI_GCMUL = 200;

const int LUA_COMPAT_LSTR = 1;

const int LUAI_BITSINT = 32;

const int LUAI_MAXINT32 = 2147483647;

const int LUAI_MAXCALLS = 20000;

const int LUAI_MAXCSTACK = 8000;

const int LUAI_MAXCCALLS = 200;

const int LUAI_MAXVARS = 200;

const int LUAI_MAXUPVALUES = 60;

const int LUAL_BUFFERSIZE = 1024;

const String LUA_NUMBER_SCAN = '%lf';

const String LUA_NUMBER_FMT = '%.14g';

const int LUAI_MAXNUMBER2STR = 32;

const int LUA_MAXCAPTURES = 32;

const int LUAI_EXTRASPACE = 0;

const String LUA_INTFRMLEN = 'l';

const String LUA_VERSION = 'Lua 5.1';

const String LUA_RELEASE = 'Lua 5.1.5';

const int LUA_VERSION_NUM = 501;

const String LUA_COPYRIGHT = 'Copyright (C) 1994-2012 Lua.org, PUC-Rio';

const String LUA_AUTHORS = 'R. Ierusalimschy, L. H. de Figueiredo & W. Celes';

const String LUA_SIGNATURE = '\x1BLua';

const int LUA_MULTRET = -1;

const int LUA_REGISTRYINDEX = -10000;

const int LUA_ENVIRONINDEX = -10001;

const int LUA_GLOBALSINDEX = -10002;

const int LUA_YIELD = 1;

const int LUA_ERRRUN = 2;

const int LUA_ERRSYNTAX = 3;

const int LUA_ERRMEM = 4;

const int LUA_ERRERR = 5;

const int LUA_TNONE = -1;

const int LUA_TNIL = 0;

const int LUA_TBOOLEAN = 1;

const int LUA_TLIGHTUSERDATA = 2;

const int LUA_TNUMBER = 3;

const int LUA_TSTRING = 4;

const int LUA_TTABLE = 5;

const int LUA_TFUNCTION = 6;

const int LUA_TUSERDATA = 7;

const int LUA_TTHREAD = 8;

const int LUA_MINSTACK = 20;

const int LUA_GCSTOP = 0;

const int LUA_GCRESTART = 1;

const int LUA_GCCOLLECT = 2;

const int LUA_GCCOUNT = 3;

const int LUA_GCCOUNTB = 4;

const int LUA_GCSTEP = 5;

const int LUA_GCSETPAUSE = 6;

const int LUA_GCSETSTEPMUL = 7;

const int LUA_HOOKCALL = 0;

const int LUA_HOOKRET = 1;

const int LUA_HOOKLINE = 2;

const int LUA_HOOKCOUNT = 3;

const int LUA_HOOKTAILRET = 4;

const int LUA_MASKCALL = 1;

const int LUA_MASKRET = 2;

const int LUA_MASKLINE = 4;

const int LUA_MASKCOUNT = 8;

const int MAX_SIZET = -3;

const int MAX_LUMEM = -3;

const int MAX_INT = 2147483645;

const int MAXSTACK = 250;

const int MINSTRTABSIZE = 32;

const int LUA_MINBUFFER = 32;

const int LAST_TAG = 8;

const int NUM_TAGS = 9;

const int LUA_TPROTO = 9;

const int LUA_TUPVAL = 10;

const int LUA_TDEADKEY = 11;

const int VARARG_HASARG = 1;

const int VARARG_ISVARARG = 2;

const int VARARG_NEEDSARG = 4;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_12_0 = 120000;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 110000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120000;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int LUA_ERRFILE = 6;

const int LUA_NOREF = -2;

const int LUA_REFNIL = -1;

const String MEMERRMSG = 'not enough memory';

const int EOZ = -1;

const int FIRST_RESERVED = 257;

const int TOKEN_LEN = 9;

const int NUM_RESERVED = 21;

const int SIZE_C = 9;

const int SIZE_B = 9;

const int SIZE_Bx = 18;

const int SIZE_A = 8;

const int SIZE_OP = 6;

const int POS_OP = 0;

const int POS_A = 6;

const int POS_C = 14;

const int POS_B = 23;

const int POS_Bx = 14;

const int MAXARG_Bx = 262143;

const int MAXARG_sBx = 131071;

const int MAXARG_A = 255;

const int MAXARG_B = 511;

const int MAXARG_C = 511;

const int BITRK = 256;

const int MAXINDEXRK = 255;

const int NO_REG = 255;

const int NUM_OPCODES = 38;

const int LFIELDS_PER_FLUSH = 50;

const int NO_JUMP = -1;

const int EXTRA_STACK = 5;

const int BASIC_CI_SIZE = 8;

const int BASIC_STACK_SIZE = 40;

const int PCRLUA = 0;

const int PCRC = 1;

const int PCRYIELD = 2;
